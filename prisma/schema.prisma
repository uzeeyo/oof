generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         String               @id(map: "posts_pkey") @default(cuid())
  userId     String           
  text       String?            
  imageUrl   String?            
  videoUrl   String?            
  views      Int                  @default(0)
  createdAt  DateTime             @default(now())
  archivedAt DateTime?
  User       User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_posts_users")
  comments   Comment[]
  likes      Like[]
  reports    Report[]
  tags       PostTag[]
}

model Tag {
  id                String        @id @default(cuid())
  name              String        @unique
  posttags          PostTag[]
}

model PostTag {
  id                String        @id @default(cuid())
  postId            String
  tagId             String
  post              Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag               Tag           @relation(fields: [tagId], references: [id])

}

model Comment {
  id                String        @id @default(cuid())
  text              String
  imageUrl          String?
  createdAt         DateTime      @default(now())
  postId            String
  post              Post          @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}


model Like {
  id                String        @id @default(cuid())
  liked             Boolean
  userId            String
  postId            String
  user              User          @relation(fields: [userId], references: [id])
  post              Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([userId, postId], map: "userId_postId")
}

model User {    
  id                String        @id @default(cuid())
  username          String        @unique
  email             String?       @unique
  emailVerified     DateTime?
  password          String?
  createdAt         DateTime      @default(now())
  archivedAt        DateTime?   
  lastLogin         DateTime?
  failedLogins      Int           @default(0)
  posts             Post[]
  likes             Like[]
  reports           Report[]
  settings          UserSettings?
  @@unique([username, email], map: "username_email")
}

model UserSettings {
  id                        String        @id @default(cuid())
  darkMode                  Boolean       @default(false)
  desktopNotify             Boolean       @default(false)
  mobileNotify              Boolean       @default(false)
  usernameVisibleOnPosts    Boolean       @default(false)
  usernameVisibleOnComments Boolean       @default(false)
  showPorn                  Boolean       @default(false)
  showViolence              Boolean       @default(false)
  userId                    String        @unique
  user              User          @relation(fields: [userId], references: [id])
}

model Report {
  id            String            @id @default(cuid())
  postId        String
  userId        String
  post          Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id])

}